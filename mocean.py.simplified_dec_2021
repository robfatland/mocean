version_string = "V3.14 Caprice Edition non troppo"

# added for application code version:
import bottle

from   bottle import request, route, run
import json
from   math   import sqrt, exp, sin, cos
import math
from   random import randint, random
from   time   import time

@route('/mocean', method='GET')
def mocean(): 
    msg = "\navast there ya swells, let's go a-whalin\n\n")
    msg += "route       key        value            returns:                          \n")
    msg += "=======     =======    =======          ===================               \n")
    msg += "mocean      ----       ----             this usage message                \n")
    msg += "                                                                          \n")
    return msg

##########
#
# functions for Steps game
#
##########

def genfibo(n):
    if n < 3: n = 3
    if n > 30: n = 30
    fibo = [0, 1]
    for i in range(2, n): fibo.append(fibo[-1] + fibo[-2])
    return fibo
    
def isprime(n):
    if n == 2: return True
    if n < 2 or not n % 2: return False
    for i in range(3, int(sqrt(n))+1, 2): 
        if not n % i: return False
    return True

#####################
#
# The mocean usage route
#
#####################

version_message = version_string + '   browser? add client=browser. brief? add usage=brief'

@route('/mocean', method='GET')
def mocean():

    m = ""
    client_type = request.GET.client.strip()
    usage_type  = request.GET.usage.strip()

    if client_type == 'browser': 
        eol = '<br>'
        m += "<!DOCTYPE HTML>"
        m += "<html>"
        m += "<head>"
        m += "<title>Welcome to the Toroidal Mocean!</title>"
        m += "</head>"
        m += "<body>"
        m += "<div>"
        m += "<tt>"
        m += "<PRE>"

    else:
        eol = '\n'
    
    m  += version_message + eol
    m  += world_message + eol

    if usage_type == 'brief':

        m  += "mocean                 --> this message (this is the brief version)      " + eol

    else: 
        m  += "    Unless noted: a FAIL returns string 0, SUCCESS returns 1                      " + eol
        m  += "                                                                                  " + eol
        m  += "route            key         value                     return string              " + eol
        m  += "=========        =========   ==================        =====================      " + eol
        m  += "                                                                                  " + eol
        m  += "mocean           -           -                         this message (long version)" + eol
        m  += "                                                                                  " + eol

    if client_type == 'browser': 
        m += "</PRE>"
        m += "</div>"
        m += "</body>"
        m += "</html>"

    return(m)


#####################################################
#####################################################
####
####   STEPS game and related utilities
####
#####################################################
#####################################################


@route('/hello')
def hello(): return 'be a swell and have some 3.14'

@route('/begin', method='GET')
def steps_game_part_1():
    msg = request.GET.message.strip()
    try :  vfloat = float(msg) 
    except : return 'you are on the right route, "begin", but your message is not numerical enough for me!!!'
    v = int(vfloat)
    if v < 0: return 'ah good, you are getting warm... i like numbers but this one is a bit negative :( '
    if v == 0: return "nice message... but it a bit small don't you think?" 
    if not float(v) == vfloat: return 'actually I need an integer, and ' + str(vfloat) + ' has digits after the decimal point...' 
    if not isprime(v): return 'your message is positive but not prime enough' 
    if v <= 100: return "your message is prime! Make it a bit bigger, like over the century mark, and you're there"
    return "congrats, you solved it!!! A prime greater than 100. The next step: Begin again, this time using the route 'beguine'"

@route('/beguine', method='GET')
def steps_game_part_2():
    msg  = request.GET.message.strip()
    fibo = genfibo(30)
    try :    vfloat = float(msg) 
    except : return 'you are on route: "beguine"! Level 2 of the steps game... but this stage requires a number' 
    v = int(vfloat)
    if not float(v) == vfloat: return('...actually I am looking for an integer; but ' + str(vfloat) + ' has digits after the decimal point...')
    if v < 0: return('ah good, an integer, you are getting close. But stay with non-negative integers for this one')
    if v == 0: return("very nice... the first Fibonacci number! you are warm!")
    if v == 1: return("very nice... the second (and third) Fibonacci number! not quite there yet but heating up!")
    if v == 2: return("very nice... the fourth Fibonacci number! getting warmer")
    if v in fibo:
        this_index = fibo.index(v)
        if this_index == 16: return("   Congratulations! You solved the beguine route...       \n\n" + \
                                    "       (5000 Bonus Points if you calculated 987 using Python code...) \n\n" + \
                                    "           Continue the game on the 'sirduke' route...                      \n")
        return('you tried Fibonacci number ' + str(this_index + 1) + ' (which is ' + str(v) + '); right track but I am a huge fan of the *seventeenth* one...')
    return("your guess is in the right neighborhood... try making a left on Fibonacci street...")

@route('/sirduke', method='GET')
def steps_game_part_3():
    msg = request.GET.message.strip()
    if not msg == 'wigs':  return("This time I need the fourth word of the song 'Satin Doll'...")
    return("Well done! You're nobody's fool... Move on to route 'euler' now!")

@route('/euler', method='GET')
def steps_game_part_4():
    msg = request.GET.message.strip()
    try :    vfloat = float(msg) 
    except : return('you are on route "euler", level 4 of the Steps game.  This stage requires a number.')
    v = int(vfloat)
    if not float(v) == vfloat: return('...actually I am looking for an integer; whereas ' + str(vfloat) + ' has digits after the decimal point...')
    if v < 0: return('ah good, an integer, thank you, you are getting close. This integer will be positive.')
    if v < 3: return("very nice... but this integer is the sum of some other positive integers!")
    this_solution = 5000 * 10001
    if not v == this_solution: return("I need to know the sum of 1 + 2 + 3 + 4 + 5 + ... + 10000")
    return("very nice, Euler would be pleased. On to the final route, called 'meruprastarah'")

@route('/meruprastarah', method='GET')
def steps_game_part_5():
    msg = request.GET.message.strip()
    the_list = msg.split(',')
    if not len(the_list) == 6: return("I would like the 6th row of Pascale's triangle, comma-separate: 1, ....")
    try:    il = [int(the_list[i].strip()) for i in range(6)]
    except: return("you sent a list of six items, far as I can tell, but they must all be integers.")
    sl = [1, 5, 10, 10, 5, 1]
    if not il == sl: return ("Six items is correct; but I need the six numbers in row six of the Pascale triangle, separated by commas.")
    return('Well done!! You have completed the Steps game. Tell Rob this on Slack!!!')

# How to run it in casual mode...
# run(host='0.0.0.0', port=8080, reloader=True)


application = bottle.default_app()
if __name__ == '__main__': run(app=application, host='0.0.0.0', port=8080, reloader=True)
